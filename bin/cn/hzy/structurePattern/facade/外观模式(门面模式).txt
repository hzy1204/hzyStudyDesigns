如果我们没有Computer类，那么，CPU、Memory、Disk他们之间将会相互持有实例，产生关系，
这样会造成严重的依赖，修改一个类，可能会带来其他类的修改，这不是我们想要看到的，有了Computer类，
他们之间的关系被放在了Computer类里，这样就起到了解耦的作用，这，就是外观模式！


总结：
从程序可以看出，通过Computer一个外观类即可实现计算机所有部件的控制，而不需要单独去控制其所有的部件，这正是外观模式的作用。

模式优缺点
外观模式的优点
•对客户屏蔽子系统组件，减少了客户处理的对象数目并使得子系统使用起来更加容易。同时，客户代码变简单
• 实现了子系统与客户之间的松耦合关系。       
   降低了大型软件系统中的编译依赖性，并简化了系统在不同平台之间的移植过程。
•只是提供了一个访问子系统的统一入口，并不影响用户直接使用子系统类。
 
外观模式的缺点
•不能很好地限制客户使用子系统类，如果对客户访问子系统类做太多的限制则减少了可变性和灵活性。
•在不引入抽象外观类的情况下，增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。

外观模式适用环境
在以下情况下可以使用外观模式：
•当要为一个复杂子系统提供一个简单接口时可以使用外观模式。
•客户程序与多个子系统之间存在很大的依赖性。
•在层次化结构中，可以使用外观模式定义系统中每一层的入口，层与层之间不直接产生联系，而通过外观类建立联系，降低层之间的耦合度。
模式扩展

•门面(Facade)角色 ：客户端可以调用这个角色的方法。此角色知晓相关的（一个或者多个）子系统的
  功能和责任。在正常情况下，本角色会将所有从客户端发来的请求委派到相应的子系统去。
•子系统(SubSystem)角色 ：可以同时有一个或者多个子系统。每个子系统都不是一个单独的类，而是
    一个类的集合。每个子系统都可以被客户端直接调用，或者被门面角色调用。子系统并不知道门面的存在，
    对于子系统而言，门面仅仅是另外一个客户端而已。

一个系统有多个外观类
•在外观模式中，通常只需要一个外观类，并且此外观类只有一个实例，换言之它是一个单例类。在很多情况下为了节约系统资源，
  一般将外观类设计为单例类。当然这并不意味着在整个系统里只能有一个外观类，在一个系统中可以设计多个外观类，
  每个外观类都负责和一些特定的子系统交互，向用户提供相应的业务功能。

外观模式扩展注意
不要试图通过外观类为子系统增加新行为
•不要通过继承一个外观类在子系统中加入新的行为，这种做法是错误的。
•外观模式的用意：为子系统提供一个集中化和简化的沟通渠道

外观模式与迪米特法则
•外观模式创造出一个外观对象，将客户端所涉及的属于一个子系统的协作伙伴的数量减到最少，使得客户端与子系统内部的对象的相互作用被外观对象所取代。
•外观模式就是实现代码重构以便达到“迪米特法则”要求的一个强有力的武器。
 
抽象外观类的引入
•外观模式最大的缺点在于违背了“开闭原则”，当增加新的子系统或者移除子系统时需要修改外观类，可以通过引入抽象外观类在一定程度上解决该问题，客户端针对抽象外观类进行编程。